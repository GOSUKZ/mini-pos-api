"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–∞.

Example:
    $ python -m utils.create_xlsx_db
"""

import asyncio

import asyncpg
import pandas as pd


async def create_database(db_url):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    conn = await asyncpg.connect(db_url)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await conn.execute(
        """
        CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            sku_code TEXT UNIQUE,
            barcode TEXT,
            unit TEXT,
            sku_name TEXT,
            status_1c TEXT,
            department TEXT,
            group_name TEXT,
            subgroup TEXT,
            supplier TEXT,
            cost_price REAL DEFAULT 0,
            price REAL DEFAULT 0
        )
        """
    )

    await conn.close()


async def parse_excel_to_postgres(excel_file, db_url):
    """–ü–∞—Ä—Å–∏–Ω–≥ Excel-—Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    await create_database(db_url)  # –°–æ–∑–¥–∞–µ–º –ë–î –∏ —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –Ω–µ—Ç)

    # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    pool = await asyncpg.create_pool(db_url)

    # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ Excel-—Ñ–∞–π–ª–∞
    xls = pd.ExcelFile(excel_file)
    sheet_names = xls.sheet_names

    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    total_records = 0
    added_records = 0
    skipped_records = 0

    print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {excel_file}")
    print(f"–ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(sheet_names)}")

    async with pool.acquire() as conn:
        for sheet_name in sheet_names:
            print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: {sheet_name}")

            try:
                df = pd.read_excel(excel_file, sheet_name=sheet_name)
                sheet_records = len(df)
                total_records += sheet_records
                print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {sheet_records}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                required_columns = [
                    "–ö–æ–¥ SKU",
                    "–®—Ç—Ä–∏—Ö –ö–æ–¥",
                    "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ SKU",
                    "–°—Ç–∞—Ç—É—Å 1–°",
                    "–û—Ç–¥–µ–ª",
                    "–ì—Ä—É–ø–ø–∞",
                    "–ü–æ–¥–≥—Ä—É–ø–ø–∞",
                    "–ü–æ—Å—Ç–∞–≤—â–∏–∫",
                ]
                missing_columns = [col for col in required_columns if col not in df.columns]
                if missing_columns:
                    print(f"‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}' –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫: {missing_columns})")
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º SKU
                df = df.dropna(subset=["–ö–æ–¥ SKU"])

                for _, row in df.iterrows():
                    try:
                        sku_code = str(row["–ö–æ–¥ SKU"]).strip()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                        exists = await conn.fetchval(
                            "SELECT 1 FROM products WHERE sku_code = $1", sku_code
                        )
                        if exists:
                            skipped_records += 1
                            continue

                        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                        await conn.execute(
                            """
                            INSERT INTO products (
                                sku_code, barcode, unit, sku_name, status_1c,
                                department, group_name, subgroup, supplier,
                                cost_price, price
                            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, 0, 0)
                            """,
                            sku_code,
                            str(row["–®—Ç—Ä–∏—Ö –ö–æ–¥"]).strip(),
                            str(row["–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"]).strip(),
                            str(row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ SKU"]).strip(),
                            str(row["–°—Ç–∞—Ç—É—Å 1–°"]).strip(),
                            str(row["–û—Ç–¥–µ–ª"]).strip(),
                            str(row["–ì—Ä—É–ø–ø–∞"]).strip(),
                            str(row["–ü–æ–¥–≥—Ä—É–ø–ø–∞"]).strip(),
                            str(row["–ü–æ—Å—Ç–∞–≤—â–∏–∫"]).strip(),
                        )
                        added_records += 1

                    except asyncpg.UniqueViolationError:
                        skipped_records += 1
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")

                await conn.execute("COMMIT")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ª–∏—Å—Ç–µ '{sheet_name}': {e}")

    await pool.close()

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "=" * 50)
    print("‚úÖ –ò–¢–û–ì–ò –ò–ú–ü–û–†–¢–ê:")
    print(f"üì¶ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {added_records}")
    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö): {skipped_records}")
    print("=" * 50)


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–π–ª Excel –∏ URL PostgreSQL,
    –∞ –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é parse_excel_to_postgres –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
    """
    excel_file = "data.xlsx"

    await parse_excel_to_postgres(
        excel_file, "postgresql://makkenzo:qwerty@localhost:5432/claude_data_shop"
    )

    print("\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    asyncio.run(main())
    asyncio.run(main())
